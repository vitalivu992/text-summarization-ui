import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as actions from './redux/actions';

import { Header, Button, Divider, Label, Icon, Form, Grid } from 'semantic-ui-react';

export class ToolPage extends Component {
  static propTypes = {
    summarize: PropTypes.object.isRequired,
    actions: PropTypes.object.isRequired,
  };

  render() {
    console.error('<<<< this.props.summarize >>>>', this.props.summarize);
    const { summarizePending, summarizeError, summarizeTime,
      loadExamplePending, loadExampleError,
      rateSummaryTextPending, rateSummaryTextError,
      rouge1Score, rouge2Score, rougeLScore,
      article, goldSummary, computeSummary } = this.props.summarize;

    const { summarize, loadExample, rateSummaryText } = this.props.actions;

    const handleChange = event => { this.props.summarize[event.target.name] = event.target.value; };

    const loadSummary = () => {
      summarize(article);
    }
    const loadRateSummary = () => {
      rateSummaryText(goldSummary, computeSummary);
    }

    return (
      <div className="summarize-tool-page">
        <Header as='h1'>Text summarization</Header>
        <Form onSubmit={summarize}>
          <Divider />
          <Button width={2} primary={!loadExamplePending} disabled={loadExamplePending}
            onClick={loadExample} size='tiny' >
            <Icon name='random' /> Load an example
              </Button>
          <Button width={2} primary={!summarizePending} disabled={summarizePending}
            onClick={loadSummary} size='tiny' >
            <Icon name='comment alternate' /> Summarize
              </Button>
          <Button width={2} primary={!rateSummaryTextPending} disabled={rateSummaryTextPending}
            onClick={loadRateSummary} size='tiny' >
            <Icon name='check square' /> Rate
              </Button>
          <Divider />
          <Grid columns={2} relaxed='very'>
            <Grid.Column>
              <Form.TextArea label='Input article' placeholder={article != null ? article : 'Your article'} size='large'
                name='article' onChange={handleChange} />
            </Grid.Column>
            <Grid.Column>
              <Form.TextArea label='Gold summary' placeholder={goldSummary != null ? goldSummary : 'This is the gold summary'}
                name='gold_summary' onChange={handleChange} />
              <Form.TextArea label='Computed summary' placeholder={computeSummary != null ? computeSummary : 'This is the summary generated by our model'}
                name='compute_summary' onChange={handleChange} />
              {summarizeTime && <Label as='a'><Icon name='clock' /> {summarizeTime} ms</Label>}
              {rouge1Score && <Label as='a'> ROUGE-1 <Label.Detail>{rouge1Score}</Label.Detail> </Label>}
              {rouge2Score && <Label as='a'> ROUGE-2 <Label.Detail>{rouge2Score}</Label.Detail> </Label>}
              {rougeLScore && <Label as='a'> ROUGE-L <Label.Detail>{rougeLScore}</Label.Detail> </Label>}
            </Grid.Column>
          </Grid>
        </Form>
      </div>
    );
  }
}

/* istanbul ignore next */
function mapStateToProps(state) {
  return {
    summarize: state.summarize,
  };
}

/* istanbul ignore next */
function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators({ ...actions }, dispatch)
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ToolPage);
